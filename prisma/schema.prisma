// FLUX AI Capital Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts   Account[]
  sessions   Session[]
  portfolios Portfolio[]
  activities Activity[]
  strategies Strategy[]
  sharedStrategies SharedStrategy[]
  strategyLikes StrategyLike[]
  strategyComments StrategyComment[]
  following UserFollow[] @relation("following")
  followers UserFollow[] @relation("followers")
  notifications Notification[]
  sentNotifications Notification[] @relation("sender")
  userProfile UserProfile?
  blockedUsers BlockedUser[] @relation("blocker")
  blockedBy BlockedUser[] @relation("blocked")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Portfolio management
model Portfolio {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String?
  currency    String           @default("KRW")
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings     Holding[]
  transactions Transaction[]
  performances Performance[]

  @@index([userId])
  @@map("portfolios")
}

model Holding {
  id           String   @id @default(cuid())
  portfolioId  String
  symbol       String
  quantity     Decimal
  averagePrice Decimal
  currentPrice Decimal
  marketValue  Decimal
  realizedPnL  Decimal  @default(0)
  unrealizedPnL Decimal @default(0)
  updatedAt    DateTime @updatedAt

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol])
  @@index([portfolioId])
  @@map("holdings")
}

model Transaction {
  id          String          @id @default(cuid())
  portfolioId String
  type        TransactionType
  symbol      String
  quantity    Decimal
  price       Decimal
  amount      Decimal
  fee         Decimal         @default(0)
  notes       String?
  executedAt  DateTime        @default(now())
  createdAt   DateTime        @default(now())

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId, executedAt])
  @@map("transactions")
}

model Performance {
  id          String   @id @default(cuid())
  portfolioId String
  date        DateTime
  totalValue  Decimal
  dailyReturn Decimal
  cumReturn   Decimal
  createdAt   DateTime @default(now())

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, date])
  @@index([portfolioId, date])
  @@map("performances")
}

// Activity logging
model Activity {
  id         String       @id @default(cuid())
  userId     String
  type       ActivityType
  action     String
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime     @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("activities")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  BUY
  SELL
  DEPOSIT
  WITHDRAWAL
  FEE
  DIVIDEND
}

enum ActivityType {
  LOGIN
  LOGOUT
  PORTFOLIO_CREATE
  PORTFOLIO_UPDATE
  PORTFOLIO_DELETE
  TRANSACTION_CREATE
  SETTINGS_UPDATE
  STRATEGY_CREATE
  STRATEGY_UPDATE
  STRATEGY_DELETE
  STRATEGY_SHARE
  USER_FOLLOW
  USER_UNFOLLOW
}

// Social Features Models

// User Profile for social features
model UserProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  bio           String?
  location      String?
  website       String?
  twitter       String?
  github        String?
  linkedin      String?
  avatarUrl     String?
  coverImageUrl String?
  isPublic      Boolean  @default(true)
  followerCount Int      @default(0)
  followingCount Int     @default(0)
  strategyCount Int      @default(0)
  reputation    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// Strategy Model
model Strategy {
  id               String     @id @default(cuid())
  userId           String
  name             String
  description      String?
  type             StrategyType
  config           Json
  rules            Json?
  backtest         Json?
  performance      Json?
  isPublic         Boolean    @default(false)
  isActive         Boolean    @default(true)
  version          Int        @default(1)
  tags             Json      @default("[]")
  riskLevel        RiskLevel  @default(MEDIUM)
  expectedReturn   Decimal?
  sharpeRatio      Decimal?
  maxDrawdown      Decimal?
  winRate          Decimal?
  totalTrades      Int        @default(0)
  profitableTrades Int        @default(0)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedStrategies SharedStrategy[]
  likes            StrategyLike[]
  comments         StrategyComment[]
  performances     StrategyPerformance[]
  
  @@index([userId, isPublic])
  @@index([createdAt])
  @@map("strategies")
}

// Shared Strategy (when users share strategies)
model SharedStrategy {
  id               String   @id @default(cuid())
  strategyId       String
  userId           String
  title            String
  description      String?
  performance      Json?
  viewCount        Int      @default(0)
  likeCount        Int      @default(0)
  commentCount     Int      @default(0)
  shareCount       Int      @default(0)
  isFeatured       Boolean  @default(false)
  privacyLevel     PrivacyLevel @default(PUBLIC)
  allowComments    Boolean  @default(true)
  allowCopy        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([strategyId, userId])
  @@index([createdAt])
  @@index([viewCount])
  @@index([likeCount])
  @@map("shared_strategies")
}

// Strategy Performance Tracking
model StrategyPerformance {
  id             String   @id @default(cuid())
  strategyId     String
  date           DateTime
  totalReturn    Decimal
  dailyReturn    Decimal
  trades         Int      @default(0)
  winRate        Decimal?
  profitFactor   Decimal?
  sharpeRatio    Decimal?
  maxDrawdown    Decimal?
  portfolioValue Decimal
  createdAt      DateTime @default(now())
  
  // Relations
  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  
  @@unique([strategyId, date])
  @@index([strategyId, date])
  @@map("strategy_performances")
}

// User Follow System
model UserFollow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  // Relations
  follower  User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_follows")
}

// Strategy Likes
model StrategyLike {
  id         String   @id @default(cuid())
  strategyId String
  userId     String
  createdAt  DateTime @default(now())
  
  // Relations
  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([strategyId, userId])
  @@index([strategyId])
  @@index([userId])
  @@map("strategy_likes")
}

// Strategy Comments
model StrategyComment {
  id         String   @id @default(cuid())
  strategyId String
  userId     String
  content    String
  parentId   String?
  isEdited   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  strategy Strategy        @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   StrategyComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  StrategyComment[] @relation("CommentReplies")
  
  @@index([strategyId, createdAt])
  @@index([userId])
  @@map("strategy_comments")
}

// Notification System
model Notification {
  id         String           @id @default(cuid())
  userId     String
  type       NotificationType
  title      String
  message    String
  data       Json?
  isRead     Boolean          @default(false)
  isEmail    Boolean          @default(false)
  senderId   String?
  createdAt  DateTime         @default(now())
  readAt     DateTime?
  
  // Relations
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender User? @relation("sender", fields: [senderId], references: [id], onDelete: SetNull)
  
  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Blocked Users
model BlockedUser {
  id          String   @id @default(cuid())
  blockerId   String
  blockedId   String
  reason      String?
  createdAt   DateTime @default(now())
  
  // Relations
  blocker User @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  
  @@unique([blockerId, blockedId])
  @@map("blocked_users")
}

// Report System for Content Moderation
model Report {
  id           String       @id @default(cuid())
  reporterId   String
  targetType   ReportTarget
  targetId     String
  reason       ReportReason
  description  String?
  status       ReportStatus @default(PENDING)
  resolvedBy   String?
  resolvedAt   DateTime?
  resolution   String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  @@index([targetType, targetId])
  @@index([status])
  @@map("reports")
}

// Additional Enums for Social Features
enum StrategyType {
  AI_GENERATED
  MANUAL
  HYBRID
  BACKTEST_ONLY
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum PrivacyLevel {
  PUBLIC
  FOLLOWERS_ONLY
  PRIVATE
}

enum NotificationType {
  FOLLOW
  UNFOLLOW
  STRATEGY_LIKE
  STRATEGY_COMMENT
  STRATEGY_SHARE
  COMMENT_REPLY
  STRATEGY_PERFORMANCE
  SYSTEM_ALERT
  ACHIEVEMENT
}

enum ReportTarget {
  USER
  STRATEGY
  COMMENT
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  MISLEADING_INFORMATION
  HARASSMENT
  COPYRIGHT_VIOLATION
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}
